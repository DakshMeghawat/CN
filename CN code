Skip to content
Search or jump to…
Pull requests
Issues
Codespaces
Marketplace
Explore
 
@amritrai5757 
amritrai5757
/
p
Public
Code
Issues
Pull requests
Actions
Projects
Wiki
Security
Insights
Settings
p/p
@amritrai5757
amritrai5757 Update p
Latest commit 391c011 1 minute ago
 History
 1 contributor
197 lines (122 sloc)  4.09 KB

#DATA AND TIME

#SERVER

# server.py 
import socket                                         
import time

# create a socket object
serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 

# get local machine name
host = socket.gethostname()                           

port = 9999                                           

# bind to the port
serversocket.bind((host, port))                                  

# queue up to 5 requests
serversocket.listen(5)                                           

while True:
    # establish a connection
    clientsocket,addr = serversocket.accept()      

    print("Got a connection from %s" % str(addr))
    currentTime = time.ctime(time.time()) + "\r\n"
    clientsocket.send(currentTime.encode('ascii'))
    clientsocket.close()
    
 
 #CLIENT

# client.py  
import socket

# create a socket object
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 

# get local machine name
host = socket.gethostname()                           

port = 9999

# connection to hostname on the port.
s.connect((host, port))                               

# Receive no more than 1024 bytes
tm = s.recv(1024)                                     

s.close()

print("The time got from the server is %s" % tm.decode('ascii'))














#DNSSS


*client*
import socket
hostname=socket.gethostname()
ipaddr="127.0.0.1"
s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
addr=(ipaddr,1234)
c="Y"
while c.upper()=="Y":
 req_domain = input("enter domain name for which the ip is
needed:")
 send=s.sendto(req_domain.encode(),addr)
 data, address=s.recvfrom(1024)
 reply_ip = data.decode().strip()
 print(f"the ip for the domain name{req_domain}:{reply_ip}")
 c=(input("continue?(y/n)"))
s.close()
*SERVER*
import socket
dns_table={"www.google.com": "192.165.1.1","www.youtube.com":
"192.165.1.2","www.gmail.com": "192.165.1.3"}
s=socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
print("starting server....")
s.bind(("127.0.0.1",1234))
while True:
 data,address=s.recvfrom(1024)
 print(f"{address} wants to fetch data")
 data=data.decode()
 ip=dns_table.get(data,"not found").encode()
 send=s.sendto(ip,address)
s.close()










#HALF DUPLEX


# Server Side Script
# Supports Python v3.*

from socket import *
server_port = 5000
server_socket = socket(AF_INET,SOCK_STREAM)
server_socket.bind(('',server_port))
server_socket.listen(1)
print ("Welcome: The server is now ready to receive")
connection_socket, address = server_socket.accept()
while True:
  sentence = connection_socket.recv(2048).decode()
  print('>> ',sentence)
  message = input(">> ")
  connection_socket.send(message.encode())
  if(message == 'q'):
    connectionSocket.close()
    


#CLIENT

# Client Side Script
# Supports Python v3.*

from socket import *
server_name = 'localhost'
server_port = 5000
client_socket = socket(AF_INET, SOCK_STREAM)
client_socket.connect((server_name,server_port))

while True:
  sentence = input(">> ")
  client_socket.send(sentence.encode())
  message = client_socket.recv(2048)
  print (">> ", message.decode())
  if(sentence == 'q'):
    client_socket.close()






#TCP 

#CLIENT

import socket               # Import socket module

serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)    # Create a socket object

host = socket.gethostname() # Get local machine name
port = 12345                # Reserve a port for your service.
serversocket.bind((host, port))        # Bind to the port

print("server in listen mode")
serversocket.listen(5)                 # Now wait for client connection.
while True:
   clientsocket, addr = serversocket.accept()     # Establish connection with client.
   print("connection has been establihed from :",addr)
   
   clientsocket.send(bytes('Thank you for connecting',"utf-8"))
   clientsocket.close()
                 
                 
#SERVER

import socket               # Import socket module

s = socket.socket()         # Create a socket object
host = socket.gethostname() # Get local machine name
port = 12345                # Reserve a port for your service.

s.connect((host, port))
print("connection request is sent")

msg=(s.recv(1024))
print(msg.decode("utf-8"))
s.close()  



Footer
© 2022 GitHub, Inc.
Footer navigation
Terms
Privacy
Security
Status
Docs
Contact GitHub
Pricing
API
Training
Blog
About













#ARP SERVER


import socket
table={
'192.168.1.1':'1E.4A.4A.11',
'192.168.2.1':'1E.4B.4C.21',
'192.168.3.2':'CE.C5.FC.F1',
'1E.4A.4A.11':'192.168.1.1',
'1E.4B.4C.21':'192.168.2.1',
'CE.C5.FC.F1':'192.168.3.2'
}
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.bind(('',1234))
s.listen()
clientsocket,address=s.accept()
print("connection from",address,"Has Established")
ip=clientsocket.recv(1024)
ip=ip.decode("utf-8")
mac=table.get(ip,'no entry for given address')
clientsocket.send(mac.encode())


#ClIENT

import socket
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect(('localhost',1234))
a=input("ARP or RARP")
if (a=="ARP"):
    add=input('Enter IP:')
elif(a=="RARP"):
    add=input('Enter MAC:')
s.send(add.encode())
mac=s.recv(1024)
mac=mac.decode("utf-8")
if(a=="ARP"):
    print('MAC of',add,'is:',mac)
else:
    print('IP of',add,'is:',mac)
    
    







#UDPPP

server

import socket

localIP     = "127.0.0.1"

localPort   = 20001

bufferSize  = 1024

msgFromServer       = "Hello UDP Client"

bytesToSend         = str.encode(msgFromServer)

# Create a datagram socket

UDPServerSocket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)

# Bind to address and ip

UDPServerSocket.bind((localIP, localPort))

print("UDP server up and listening")

# Listen for incoming datagrams

while(True):

    bytesAddressPair = UDPServerSocket.recvfrom(bufferSize)

    message = bytesAddressPair[0]

    address = bytesAddressPair[1]

    clientMsg = "Message from Client:{}".format(message)
    clientIP  = "Client IP Address:{}".format(address)
    
    print(clientMsg)
    print(clientIP)

    # Sending a reply to client

    UDPServerSocket.sendto(bytesToSend, address)
    


#CLIENT


import socket

msgFromClient       = "Hello UDP Server"

bytesToSend         = str.encode(msgFromClient)

serverAddressPort   = ("127.0.0.1", 20001)

bufferSize          = 1024

# Create a UDP socket at client side

UDPClientSocket = socket.socket(family=socket.AF_INET, type=socket.SOCK_DGRAM)

# Send to server using created UDP socket

UDPClientSocket.sendto(bytesToSend, serverAddressPort)

msgFromServer = UDPClientSocket.recvfrom(bufferSize)

msg = "Message from Server {}".format(msgFromServer[0])

print(msg)






#FTP

#Clinet side

import socket
import os

class Client:
    def _init_(self):
        self.s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        self.connect_to_server()

    def connect_to_server(self):
        self.target_ip = input('Enter ip --> ')
        self.target_port = input('Enter port --> ')

        self.s.connect((self.target_ip,int(self.target_port)))

        self.main()

    def reconnect(self):
        self.s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        self.s.connect((self.target_ip,int(self.target_port)))

    def main(self):
        while 1:
            file_name = input('Enter file name on server --> ')
            self.s.send(file_name.encode())

            confirmation = self.s.recv(1024)
            if confirmation.decode() == "file-doesn't-exist":
                print("File doesn't exist on server.")

                self.s.shutdown(socket.SHUT_RDWR)
                self.s.close()
                self.reconnect()

            else:        
                write_name = 'from_server '+file_name
                if os.path.exists(write_name): os.remove(write_name)

                with open(write_name,'wb') as file:
                    while 1:
                        data = self.s.recv(1024)

                        if not data:
                            break

                        file.write(data)

                print(file_name,'successfully downloaded.')

                self.s.shutdown(socket.SHUT_RDWR)
                self.s.close()
                self.reconnect()
                
client = Client()

#---------------------------------------------------------------------
# server side
import socket
import threading
import os

class Server:
    def _init_(self):
        self.s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        self.accept_connections()
    
    def accept_connections(self):
        ip = socket.gethostbyname(socket.gethostname())
        port = int(input('Enter desired port --> '))

        self.s.bind((ip,port))
        self.s.listen(100)

        print('Running on IP: '+ip)
        print('Running on port: '+str(port))

        while 1:
            c, addr = self.s.accept()
            print(c)
            
            threading.Thread(target=self.handle_client,args=(c,addr,)).start()

    def handle_client(self,c,addr):
        data = c.recv(1024).decode()
    
        if not os.path.exists(data):
            c.send("file-doesn't-exist".encode())

        else:
            c.send("file-exists".encode())
            print('Sending',data)
            if data != '':
                file = open(data,'rb')
                data = file.read(1024)
                while data:
                    c.send(data)
                    data = file.read(1024)

                c.shutdown(socket.SHUT_RDWR)
                c.close()
                

server = Server()
